#!/usr/bin/env python3
import cv2
import numpy as np
from sys import argv
import os
import json5
import math

path = os.path.split(os.path.realpath(__file__))[0]
if path.endswith("lib/roborts_navigation"):
    path = os.path.join(path, "../../share/roborts_navigation/launch")
# 获取所有可用配置文件:
map_info_path = os.path.join(path, "../map_info")
map_infos = os.listdir(map_info_path)
available_map_infos = []
print('请选择使用的矢量地图配置文件:')
for i in range(len(map_infos)):
    map_info = map_infos[i]
    if map_info.endswith(".json") or map_info.endswith(".jsonc"):
        available_map_infos.append(map_info)
        print("{}. {}".format(len(available_map_infos) - 1, map_info))

input_id = int(input("请输入编号:"))

if input_id >= len(available_map_infos) or input_id < 0:
    print("输入编号错误")
    exit(1)

map_config = ''
with open(os.path.join(map_info_path, available_map_infos[input_id]), 'r') as f:
    if not f.readable():
        print("配置文件不可读")
        exit(1)
    map_config = json5.load(f)

w = map_config['width'] + 1
h = map_config['height'] + 1
# w = w + 4 - w % 4
# h = h + 4 - h % 4
save_path = os.path.join(path, "../cost_map/slope_map/")
save_path = os.path.join(
    save_path, available_map_infos[input_id].split(".")[0] + ".png")

pixel_per_dis = map_config['dis_per_pixel']

w = int(w / pixel_per_dis)
h = int(h / pixel_per_dis)

img = np.array([[[128, 128, 0] for i in range(w)]
               for j in range(h)], dtype=np.uint8)

if not 'slope' in map_config:
    print('该地图没有坡度信息')
    map_config['slope'] = []

for slope in map_config['slope']:
    if slope['type'] == 'rectangle':
        angle_x = slope['angle_x'] / 180 * 128 + 128
        angle_y = slope['angle_y'] / 180 * 128 + 128
        color = [math.floor(angle_x), math.floor(angle_y), 0]
        cv2.rectangle(img, (math.floor(slope['x'] / pixel_per_dis), math.floor(slope['y'] / pixel_per_dis)),
                      (math.ceil((slope['x'] + slope['width']) / pixel_per_dis),
                       math.ceil((slope['y'] + slope['height']) / pixel_per_dis)), color, -1)

    if slope['type'] == 'triangle':
        angle_x = slope['angle_x'] / 180 * 128 + 128
        angle_y = slope['angle_y'] / 180 * 128 + 128
        color = [math.floor(angle_x), math.floor(angle_y), 0]
        array = np.array([[math.floor(slope['x1'] / pixel_per_dis), math.floor(slope['y1'] / pixel_per_dis)],
                          [math.floor(slope['x2'] / pixel_per_dis),
                           math.floor(slope['y2'] / pixel_per_dis)],
                          [math.floor(slope['x3'] / pixel_per_dis), math.floor(slope['y3'] / pixel_per_dis)]])
        cv2.fillPoly(img, [array], color)
        cv2.polylines(img, [array], True, color, 0)


    if slope['type'] == 'quadrilateral':
        angle_x = slope['angle_x'] / 180 * 128 + 128
        angle_y = slope['angle_y'] / 180 * 128 + 128
        color = [math.floor(angle_x), math.floor(angle_y), 0]
        array = np.array([[math.floor(slope['x1'] / pixel_per_dis), math.floor(slope['y1'] / pixel_per_dis)],
                          [math.floor(slope['x2'] / pixel_per_dis),
                           math.floor(slope['y2'] / pixel_per_dis)],
                          [math.floor(slope['x3'] / pixel_per_dis),
                           math.floor(slope['y3'] / pixel_per_dis)],
                          [math.floor(slope['x4'] / pixel_per_dis), math.floor(slope['y4'] / pixel_per_dis)]])
        cv2.fillPoly(img, [array], color)
        cv2.polylines(img, [array], True, color, 0)


    if slope['type'] == 'circle':
        angle_x = slope['angle_x'] / 180 * 128 + 128
        angle_y = slope['angle_y'] / 180 * 128 + 128
        color = [math.floor(angle_x), math.floor(angle_y), 0]
        cv2.circle(img, (math.floor(slope['x'] / pixel_per_dis), math.floor(
            slope['y'] / pixel_per_dis)), math.floor(slope['radius'] / pixel_per_dis), color, -1)

cv2.imshow("result", img)
cv2.waitKey(0)
cv2.imwrite(save_path, img)
